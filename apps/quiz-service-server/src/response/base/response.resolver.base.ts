/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Response } from "./Response";
import { ResponseCountArgs } from "./ResponseCountArgs";
import { ResponseFindManyArgs } from "./ResponseFindManyArgs";
import { ResponseFindUniqueArgs } from "./ResponseFindUniqueArgs";
import { CreateResponseArgs } from "./CreateResponseArgs";
import { UpdateResponseArgs } from "./UpdateResponseArgs";
import { DeleteResponseArgs } from "./DeleteResponseArgs";
import { Quiz } from "../../quiz/base/Quiz";
import { Student } from "../../student/base/Student";
import { ResponseService } from "../response.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Response)
export class ResponseResolverBase {
  constructor(
    protected readonly service: ResponseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "read",
    possession: "any",
  })
  async _responsesMeta(
    @graphql.Args() args: ResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Response])
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "read",
    possession: "any",
  })
  async responses(
    @graphql.Args() args: ResponseFindManyArgs
  ): Promise<Response[]> {
    return this.service.responses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Response, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "read",
    possession: "own",
  })
  async response(
    @graphql.Args() args: ResponseFindUniqueArgs
  ): Promise<Response | null> {
    const result = await this.service.response(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Response)
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "create",
    possession: "any",
  })
  async createResponse(
    @graphql.Args() args: CreateResponseArgs
  ): Promise<Response> {
    return await this.service.createResponse({
      ...args,
      data: {
        ...args.data,

        quiz: args.data.quiz
          ? {
              connect: args.data.quiz,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Response)
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "update",
    possession: "any",
  })
  async updateResponse(
    @graphql.Args() args: UpdateResponseArgs
  ): Promise<Response | null> {
    try {
      return await this.service.updateResponse({
        ...args,
        data: {
          ...args.data,

          quiz: args.data.quiz
            ? {
                connect: args.data.quiz,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Response)
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "delete",
    possession: "any",
  })
  async deleteResponse(
    @graphql.Args() args: DeleteResponseArgs
  ): Promise<Response | null> {
    try {
      return await this.service.deleteResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Quiz, {
    nullable: true,
    name: "quiz",
  })
  @nestAccessControl.UseRoles({
    resource: "Quiz",
    action: "read",
    possession: "any",
  })
  async getQuiz(@graphql.Parent() parent: Response): Promise<Quiz | null> {
    const result = await this.service.getQuiz(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: Response
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
